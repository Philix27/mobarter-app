// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bank_account.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBankAccount = `-- name: CreateBankAccount :one
INSERT INTO bank_account (
  user_id,
  bank_name,  
  account_name, 
  account_no
) VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id, bank_name, account_name, account_no, user_id, created_at, updated_at
`

type CreateBankAccountParams struct {
	UserID      pgtype.Int4
	BankName    string
	AccountName string
	AccountNo   int32
}

func (q *Queries) CreateBankAccount(ctx context.Context, arg CreateBankAccountParams) (BankAccount, error) {
	row := q.db.QueryRow(ctx, createBankAccount,
		arg.UserID,
		arg.BankName,
		arg.AccountName,
		arg.AccountNo,
	)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.BankName,
		&i.AccountName,
		&i.AccountNo,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBankAccount = `-- name: DeleteBankAccount :exec
DELETE FROM bank_account
WHERE id = $1
`

func (q *Queries) DeleteBankAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBankAccount, id)
	return err
}

const getBankAccount = `-- name: GetBankAccount :one
SELECT id, bank_name, account_name, account_no, user_id, created_at, updated_at FROM bank_account
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBankAccount(ctx context.Context, id int64) (BankAccount, error) {
	row := q.db.QueryRow(ctx, getBankAccount, id)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.BankName,
		&i.AccountName,
		&i.AccountNo,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBankAccounts = `-- name: ListBankAccounts :many
SELECT id, bank_name, account_name, account_no, user_id, created_at, updated_at FROM bank_account
WHERE user_id = $1
ORDER BY bank_name
`

// ! #SECTION bank_account
func (q *Queries) ListBankAccounts(ctx context.Context, userID pgtype.Int4) ([]BankAccount, error) {
	rows, err := q.db.Query(ctx, listBankAccounts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BankAccount
	for rows.Next() {
		var i BankAccount
		if err := rows.Scan(
			&i.ID,
			&i.BankName,
			&i.AccountName,
			&i.AccountNo,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
