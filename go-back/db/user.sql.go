// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email 
) VALUES (
  $1
)
RETURNING id, wallets, first_name, last_name, dob, email, phone, created_at, updated_at
`

func (q *Queries) CreateUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, createUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Wallets,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one

SELECT id, wallets, first_name, last_name, dob, email, phone, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

// ! #SECTION user
func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Wallets,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateKyc_credentials = `-- name: UpdateKyc_credentials :exec
UPDATE users
  SET first_name = $2,
  last_name = $3,
  phone = $4
WHERE id = $1
`

type UpdateKyc_credentialsParams struct {
	ID        int64
	FirstName pgtype.Text
	LastName  pgtype.Text
	Phone     pgtype.Text
}

func (q *Queries) UpdateKyc_credentials(ctx context.Context, arg UpdateKyc_credentialsParams) error {
	_, err := q.db.Exec(ctx, updateKyc_credentials,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  SET first_name = $2,
  last_name = $3,
  phone = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID        int64
	FirstName pgtype.Text
	LastName  pgtype.Text
	Phone     pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
	)
	return err
}
