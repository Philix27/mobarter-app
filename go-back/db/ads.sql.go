// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ads.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAd = `-- name: CreateAd :one

INSERT INTO ads (
  rate,  
  limit_lower, 
  limit_upper,
  currency_pair,
  instructions 
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
)
RETURNING id, agent_id, payment_method_id, ad_status, currency_pair, limit_upper, limit_lower, rate, instructions, created_at, updated_at
`

type CreateAdParams struct {
	Rate         pgtype.Numeric
	LimitLower   pgtype.Numeric
	LimitUpper   pgtype.Numeric
	CurrencyPair NullCurrencypair
	Instructions pgtype.Text
}

// ! #SECTION Ads
func (q *Queries) CreateAd(ctx context.Context, arg CreateAdParams) (Ad, error) {
	row := q.db.QueryRow(ctx, createAd,
		arg.Rate,
		arg.LimitLower,
		arg.LimitUpper,
		arg.CurrencyPair,
		arg.Instructions,
	)
	var i Ad
	err := row.Scan(
		&i.ID,
		&i.AgentID,
		&i.PaymentMethodID,
		&i.AdStatus,
		&i.CurrencyPair,
		&i.LimitUpper,
		&i.LimitLower,
		&i.Rate,
		&i.Instructions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAd = `-- name: DeleteAd :exec
DELETE FROM ads
WHERE id = $1
`

func (q *Queries) DeleteAd(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAd, id)
	return err
}

const getAds = `-- name: GetAds :one
SELECT id, agent_id, payment_method_id, ad_status, currency_pair, limit_upper, limit_lower, rate, instructions, created_at, updated_at FROM ads
WHERE ad_status = $1 LIMIT 20
`

func (q *Queries) GetAds(ctx context.Context, adStatus NullAdsstatus) (Ad, error) {
	row := q.db.QueryRow(ctx, getAds, adStatus)
	var i Ad
	err := row.Scan(
		&i.ID,
		&i.AgentID,
		&i.PaymentMethodID,
		&i.AdStatus,
		&i.CurrencyPair,
		&i.LimitUpper,
		&i.LimitLower,
		&i.Rate,
		&i.Instructions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAd = `-- name: UpdateAd :exec
UPDATE ads
  SET currency_pair = $2,
  limit_upper = $3,
  limit_lower = $4,
  rate = $5,
  instructions = $6
WHERE id = $1
`

type UpdateAdParams struct {
	ID           int64
	CurrencyPair NullCurrencypair
	LimitUpper   pgtype.Numeric
	LimitLower   pgtype.Numeric
	Rate         pgtype.Numeric
	Instructions pgtype.Text
}

func (q *Queries) UpdateAd(ctx context.Context, arg UpdateAdParams) error {
	_, err := q.db.Exec(ctx, updateAd,
		arg.ID,
		arg.CurrencyPair,
		arg.LimitUpper,
		arg.LimitLower,
		arg.Rate,
		arg.Instructions,
	)
	return err
}
