// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  user_id,
  agent_id,
  currency_pair,
  amount,
  rate,
  order_type
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
RETURNING id, user_id, agent_id, order_type, order_status, currency_pair, amount, rate, created_at, updated_at
`

type CreateOrderParams struct {
	UserID       pgtype.Int4
	AgentID      pgtype.Int4
	CurrencyPair NullCurrencypair
	Amount       pgtype.Numeric
	Rate         pgtype.Numeric
	OrderType    NullOrdertype
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.AgentID,
		arg.CurrencyPair,
		arg.Amount,
		arg.Rate,
		arg.OrderType,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AgentID,
		&i.OrderType,
		&i.OrderStatus,
		&i.CurrencyPair,
		&i.Amount,
		&i.Rate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, user_id, agent_id, order_type, order_status, currency_pair, amount, rate, created_at, updated_at FROM orders
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListOrders(ctx context.Context, userID pgtype.Int4) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AgentID,
			&i.OrderType,
			&i.OrderStatus,
			&i.CurrencyPair,
			&i.Amount,
			&i.Rate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
  SET currency_pair = $2,
  currency_pair = $3,
  amount = $4,
  rate = $5,
  rate = $6,
  order_type = $7,
  order_status = $8
WHERE id = $1
`

type UpdateOrderParams struct {
	ID             int64
	CurrencyPair   NullCurrencypair
	CurrencyPair_2 NullCurrencypair
	Amount         pgtype.Numeric
	Rate           pgtype.Numeric
	Rate_2         pgtype.Numeric
	OrderType      NullOrdertype
	OrderStatus    NullOrderstatus
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder,
		arg.ID,
		arg.CurrencyPair,
		arg.CurrencyPair_2,
		arg.Amount,
		arg.Rate,
		arg.Rate_2,
		arg.OrderType,
		arg.OrderStatus,
	)
	return err
}
