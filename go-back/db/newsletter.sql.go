// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: newsletter.sql

package db

import (
	"context"
)

const createNewsletter = `-- name: CreateNewsletter :one
INSERT INTO newsletter (
  email
) VALUES (
  $1
)
RETURNING id, email, created_at, updated_at
`

func (q *Queries) CreateNewsletter(ctx context.Context, email string) (Newsletter, error) {
	row := q.db.QueryRow(ctx, createNewsletter, email)
	var i Newsletter
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNewsletter = `-- name: DeleteNewsletter :exec
DELETE FROM newsletter
WHERE email = $1
`

func (q *Queries) DeleteNewsletter(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteNewsletter, email)
	return err
}

const listNewsletter = `-- name: ListNewsletter :many
SELECT id, email, created_at, updated_at FROM newsletter
ORDER BY email
`

// ! #SECTION Newsletter
func (q *Queries) ListNewsletter(ctx context.Context) ([]Newsletter, error) {
	rows, err := q.db.Query(ctx, listNewsletter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Newsletter
	for rows.Next() {
		var i Newsletter
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
